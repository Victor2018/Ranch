package com.victor.ranch.ui.fragment;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.victor.ranch.module.DataObservable;import java.util.Observable;import java.util.Observer;import butterknife.ButterKnife;/** * Created by victor on 2016/10/8. */public abstract class BaseFragment extends Fragment implements Observer {    public int fragmentId = -1;    protected View rootView;    //Fragment对用户可见的标记    public boolean isVisibleToUser;    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        //isVisibleToUser这个boolean值表示:该Fragment的UI 用户是否可见        if (isVisibleToUser) {            this.isVisibleToUser = true;            lazyLoad();        } else {            this.isVisibleToUser = false;        }    }    public abstract boolean handleBackEvent();    public abstract void freshFragData();    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        DataObservable.getInstance().addObserver(this);        if (rootView == null) {            rootView = inflater.inflate(getLayoutResource(), container, false);            ButterKnife.bind(this, rootView);        }        ViewGroup parent = (ViewGroup) rootView.getParent();        if (parent != null) {            parent.removeView(rootView);        }        ButterKnife.bind(this, rootView);        return rootView;    }    protected abstract int getLayoutResource();    public String getName() {        return BaseFragment.class.getName();    }    private void lazyLoad() {        //这里进行双重标记判断,是因为setUserVisibleHint会多次回调,并且会在onCreateView执行前回调,必须确保onCreateView加载完毕且页面可见,才加载数据        if (isVisibleToUser) {            freshFragData();            //数据加载完毕,恢复标记,防止重复加载            isVisibleToUser = false;        }    }    @Override    public void onDestroyView() {        super.onDestroyView();        DataObservable.getInstance().deleteObserver(this);        ButterKnife.unbind(this);        //取消请求    }    @Override    public void update(Observable observable, Object data) {    }}