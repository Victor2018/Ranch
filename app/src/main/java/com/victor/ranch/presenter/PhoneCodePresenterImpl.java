package com.victor.ranch.presenter;import com.victor.okhttp.library.annotation.HttpParms;import com.victor.okhttp.library.data.Request;import com.victor.okhttp.library.inject.HttpInject;import com.victor.okhttp.library.module.HttpRequest;import com.victor.okhttp.library.presenter.impl.BasePresenterImpl;import com.victor.ranch.ui.view.LoginView;import java.io.IOException;import java.net.ConnectException;import java.net.SocketTimeoutException;import java.net.UnknownHostException;/* * ----------------------------------------------------------------- * Copyright (C) 2018-2028, by Victor, All rights reserved. * ----------------------------------------------------------------- * File: PhoneCodePresenterImpl * Author: Victor * Date: 2018/9/6 18:25 * Description: * ----------------------------------------------------------------- */public class PhoneCodePresenterImpl<H,T> extends BasePresenterImpl<H,T> {	/*Presenter作为中间层，持有View和Model的引用*/	private LoginView loginView;	public PhoneCodePresenterImpl(LoginView loginView) {		this.loginView = loginView;	}	@Override	public void onSuccess(T data) {		if (loginView == null) return;		if (data == null) {			loginView.OnLoginInfo(null,"no data response");		} else {			loginView.OnLoginInfo(data,"");		}	}	@Override	public void onError(IOException error) {		if (loginView == null) return;		String msg = error.getMessage();		if (error instanceof SocketTimeoutException) {			//判断超时异常			msg = "onFailure()......连接超时";		} else if (error instanceof ConnectException) {			////判断连接异常，			msg = "onFailure()......连接服务器异常";		} else if (error instanceof UnknownHostException) {			////判断连接异常，			msg = "onFailure()......未知主机异常";		}		loginView.OnLoginInfo(null,msg);	}	@Override	public Class getViewCls() {		return LoginView.class;	}	@Override	public Class getViewImplCls() {		return loginView == null ? null : loginView.getClass();	}	@Override	public void detachView() {		loginView = null;	}	@HttpParms(method = Request.POST,bodyContentType = HttpRequest.mDefaultBodyContentType)	@Override	public void sendRequest(String url, H header, T parm) {		HttpInject.inject(this);		super.sendRequest(url,header,parm);	}}